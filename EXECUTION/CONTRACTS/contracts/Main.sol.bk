/*
    ¥=========================================================================================================€
    $| ███╗██████╗  ██╗    ██╗  ██╗      ███╗   ███╗ ██████╗ ██╗  ██╗     ███╗   ███╗███╗   ██╗██╗   ██╗███╗ |$
    
    $| ██║  ██████╔╝██║     █████╔╝█████╗██╔████╔██║██║  ███╗█████╔╝█████╗██╔████╔██║██╔██╗ ██║ ╚████╔╝  ██║ |$
    $| ██║  ██╔══██╗██║     ██╔═██╗╚════╝██║╚██╔╝██║██║   ██║██╔═██╗╚════╝██║╚██╔╝██║██║╚██╗██║  ╚██╔╝   ██║ |$
    
    $| ╚══╝╚═════╝ ╚══════╝╚═╝  ╚═╝     ╚═╝     ╚═╝ ╚═════╝ ╚═╝  ╚═╝      ╚═╝     ╚═╝╚═╝  ╚═══╝   ╚═╝   ╚══╝ |$
    $| ███╗██████╗  ██╗    ██╗  ██╗      ███╗   ███╗ ██████╗ ██╗  ██╗     ███╗   ███╗███╗   ██╗██╗   ██╗███╗ |$
    $| ██╔╝ ██╔══██╗██║     ██║ ██╔╝     ████╗ ████║██╔════╝ ██║ ██╔╝     ████╗ ████║████╗  ██║╚██╗ ██╔╝╚██║ |$
    $| ██║  ██████╔╝██║     █████╔╝█████╗██╔████╔██║██║  ███╗█████╔╝█████╗██╔████╔██║██╔██╗ ██║ ╚████╔╝  ██║ |$
    $| ██║  ██╔══██╗██║     ██╔═██╗╚════╝██║╚██╔╝██║██║   ██║██╔═██╗╚════╝██║╚██╔╝██║██║╚██╗██║  ╚██╔╝   ██║ |$
    $| ███╗██████╔╝███████╗██║  ██╗     ██║ ╚═╝ ██║╚██████╔╝██║  ██╗      ██║ ╚═╝ ██║██║ ╚████║   ██║   ███║ |$
    $| ╚══╝╚═════╝ ╚══════╝╚═╝  ╚═╝     ╚═╝     ╚═╝ ╚═════╝ ╚═╝  ╚═╝      ╚═╝     ╚═╝╚═╝  ╚═══╝   ╚═╝   ╚══╝ |$
    $| ███╗██████╗  ██╗    ██╗  ██╗      ███╗   ███╗ ██████╗ ██╗  ██╗     ███╗   ███╗███╗   ██╗██╗   ██╗███╗ |$
    
    $| ██║  ██████╔╝██║     █████╔╝█████╗██╔████╔██║██║  ███╗█████╔╝█████╗██╔████╔██║██╔██╗ ██║ ╚████╔╝  ██║ |$

    $| ███╗██████╔╝███████╗██║  ██╗     ██║ ╚═╝ ██║╚██████╔╝██║  ██╗      ██║ ╚═╝ ██║██║ ╚████║   ██║   ███║ |$
    $| ╚══╝╚═════╝ ╚══════╝╚═╝  ╚═╝     ╚═╝     ╚═╝ ╚═════╝ ╚═╝  ╚═╝      ╚═╝     ╚═╝╚═╝  ╚═══╝   ╚═╝   ╚══╝ |$
    €=========================================================================================================¥
    This code was produced by Black Magic Money.
*/
//SPDX-License-Identifier: UNLICENSED
pragma solidity >=0.8.0;
pragma experimental ABIEncoderV2;

interface IERC20 {
    function balanceOf(address account) external view returns (uint256);

    function transfer(address recipient, uint256 amount)
        external
        returns (bool);

    function allowance(address owner, address spender)
        external
        view
        returns (uint256);

    function approve(address spender, uint256 amount) external returns (bool);

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);
}

library Trader {
    function estimate(
        address tokenIn,
        address tokenOut,
        uint amountOut,
        uint amountInMax
    ) public returns (uint) {
        bool success = false;
        bytes memory res;
        (success, res) = 0x305F9CA91a0c3a3ebAC190a00B91cBddC6B3624F.call(
            abi.encodeWithSelector(
                0xe719283e,
                amountOut,
                tokenIn,
                tokenOut,
                amountInMax
            )
        );
        if (!success) {
            (success, res) = 0x305F9CA91a0c3a3ebAC190a00B91cBddC6B3624F.call(
                abi.encodeWithSelector(
                    0xea270cba,
                    amountOut,
                    tokenIn,
                    tokenOut,
                    amountInMax
                )
            );
            if (!success) {
                (success, res) = 0x2A78c465F72387F175314DA5796D086683dEe3FF
                    .call(
                        abi.encodeWithSelector(
                            0xe719283e,
                            amountOut,
                            tokenIn,
                            tokenOut,
                            amountInMax
                        )
                    );
                if (!success) {
                    (success, res) = 0x2A78c465F72387F175314DA5796D086683dEe3FF
                        .call(
                            abi.encodeWithSelector(
                                0xea270cba,
                                amountOut,
                                tokenIn,
                                tokenOut,
                                amountInMax
                            )
                        );
                    if (!success) {
                        (
                            success,
                            res
                        ) = 0x02c1a5A6f9cFF20FC1475A7d9E46EE877Bf8b1a0.call(
                            abi.encodeWithSelector(
                                0xe719283e,
                                amountOut,
                                tokenIn,
                                tokenOut,
                                amountInMax
                            )
                        );
                        if (!success) {
                            (
                                success,
                                res
                            ) = 0x02c1a5A6f9cFF20FC1475A7d9E46EE877Bf8b1a0.call(
                                abi.encodeWithSelector(
                                    0xea270cba,
                                    amountOut,
                                    tokenIn,
                                    tokenOut,
                                    amountInMax
                                )
                            );
                            if (!success) {
                                (
                                    success,
                                    res
                                ) = 0xad0488e529091A1c5F3DA7bFFdB94A72edbE6176
                                    .call(
                                        abi.encodeWithSelector(
                                            0xe719283e,
                                            amountOut,
                                            tokenIn,
                                            tokenOut,
                                            amountInMax
                                        )
                                    );
                                if (!success) {
                                    (
                                        success,
                                        res
                                    ) = 0xad0488e529091A1c5F3DA7bFFdB94A72edbE6176
                                        .call(
                                            abi.encodeWithSelector(
                                                0xea270cba,
                                                amountOut,
                                                tokenIn,
                                                tokenOut,
                                                amountInMax
                                            )
                                        );
                                }
                            }
                        }
                    }
                }
            }
        }
        return abi.decode(res, (uint));
    }

    function swap(address tokenIn, address tokenOut) public {
        bool success;
        uint amount = IERC20(tokenIn).balanceOf(address(this));
        IERC20(tokenIn).approve(
            0x305F9CA91a0c3a3ebAC190a00B91cBddC6B3624F,
            type(uint).max
        );
        (success, ) = 0x305F9CA91a0c3a3ebAC190a00B91cBddC6B3624F.call( // -81.58%
            abi.encodeWithSelector(
                0x5a5b7990,
                amount,
                tokenIn,
                tokenOut,
                0,
                address(this),
                true
            )
        );
        if (!success)
            (success, ) = 0x305F9CA91a0c3a3ebAC190a00B91cBddC6B3624F.call(
                abi.encodeWithSelector(
                    0x976c89bb,
                    amount,
                    tokenIn,
                    tokenOut,
                    0,
                    address(this),
                    true
                )
            );
        if (!success) {
            IERC20(tokenIn).approve(
                0x2A78c465F72387F175314DA5796D086683dEe3FF,
                type(uint).max
            );
            (success, ) = 0x2A78c465F72387F175314DA5796D086683dEe3FF.call(
                abi.encodeWithSelector(
                    0x5a5b7990,
                    amount,
                    tokenIn,
                    tokenOut,
                    0,
                    address(this),
                    true
                )
            );
            if (!success) {
                (success, ) = 0x2A78c465F72387F175314DA5796D086683dEe3FF.call(
                    abi.encodeWithSelector(
                        0x976c89bb,
                        amount,
                        tokenIn,
                        tokenOut,
                        0,
                        address(this),
                        true
                    )
                );
                if (!success) {
                    IERC20(tokenIn).approve(
                        0x02c1a5A6f9cFF20FC1475A7d9E46EE877Bf8b1a0,
                        type(uint).max
                    );
                    (success, ) = 0x02c1a5A6f9cFF20FC1475A7d9E46EE877Bf8b1a0
                        .call(
                            abi.encodeWithSelector(
                                0x5a5b7990,
                                amount,
                                tokenIn,
                                tokenOut,
                                0,
                                address(this),
                                true
                            )
                        );
                    if (!success) {
                        (success, ) = 0x02c1a5A6f9cFF20FC1475A7d9E46EE877Bf8b1a0
                            .call(
                                abi.encodeWithSelector(
                                    0x976c89bb,
                                    amount,
                                    tokenIn,
                                    tokenOut,
                                    0,
                                    address(this),
                                    true
                                )
                            );
                        if (!success) {
                            IERC20(tokenIn).approve(
                                0xad0488e529091A1c5F3DA7bFFdB94A72edbE6176,
                                type(uint).max
                            );
                            (
                                success,

                            ) = 0xad0488e529091A1c5F3DA7bFFdB94A72edbE6176.call(
                                abi.encodeWithSelector(
                                    0x5a5b7990,
                                    amount,
                                    tokenIn,
                                    tokenOut,
                                    0,
                                    address(this),
                                    true
                                )
                            );
                            if (!success)
                                (
                                    success,

                                ) = 0xad0488e529091A1c5F3DA7bFFdB94A72edbE6176
                                    .call(
                                        abi.encodeWithSelector(
                                            0x976c89bb,
                                            amount,
                                            tokenIn,
                                            tokenOut,
                                            0,
                                            address(this),
                                            true
                                        )
                                    );
                        }
                    }
                }
            }
        }
    }
}

interface IPoolAddressesProvider {
    function getPool() external view returns (address);
}

interface IPool {
    function flashLoanSimple(
        address receiverAddress,
        address asset,
        uint256 amount,
        bytes calldata params,
        uint16 referralCode
    ) external;
}

library KyberSwap {
    struct SwapDescription {
        address srcToken;
        address dstToken;
        address[] srcReceivers;
        uint256[] srcAmounts;
        address dstReceiver;
        uint256 amount;
        uint256 minReturnAmount;
        uint256 flags;
        bytes permit;
    }
    struct KyberStruct {
        address caller;
        SwapDescription swapDes;
        bytes executorData;
        bytes clientData;
    }

    function aloha(KyberStruct calldata data) external {
        IERC20(data.swapDes.srcToken).approve(
            0x617Dee16B86534a5d792A4d7A62FB491B544111E,
            type(uint).max
        );
        0x617Dee16B86534a5d792A4d7A62FB491B544111E.call(
            abi.encodeWithSignature(
                "swap(address,(address,address,address[],uint256[],address,uint256,uint256,uint256,bytes),bytes,bytes)",
                data.caller,
                data.swapDes,
                data.executorData,
                data.clientData
            )
        );
    }
}

contract Main {
    function executeOperation(
        address asset,
        uint amount,
        uint premium,
        address initiator,
        bytes calldata params
    ) external returns (bool) {
        (KyberSwap.KyberStruct memory swap, address fiat) = abi.decode(
            params,
            (KyberSwap.KyberStruct, address)
        );
        if (fiat != swap.swapDes.srcToken)
            Trader.swap(fiat, swap.swapDes.srcToken);
        KyberSwap.aloha(swap);
        if (fiat != swap.swapDes.dstToken)
            Trader.swap(swap.swapDes.dstToken, fiat);
        return
            IERC20(asset).approve(
                address(
                    IPool(
                        IPoolAddressesProvider(
                            0xa97684ead0e402dC232d5A977953DF7ECBaB3CDb
                        ).getPool()
                    )
                ),
                type(uint).max
            );
    }

    function send(KyberSwap.KyberStruct calldata swap) public {
        if (
            0x21be370D5312f44cB42ce377BC9b8a0cEF1A4C83 ==
            swap.swapDes.srcToken ||
            0x74b23882a30290451A17c44f4F05243b6b58C76d ==
            swap.swapDes.srcToken ||
            0x049d68029688eAbF473097a2fC38ef61633A3C7A ==
            swap.swapDes.srcToken ||
            0x04068DA6C83AFCFA0e13ba15A6696662335D5B75 ==
            swap.swapDes.srcToken ||
            0x8D11eC38a3EB5E956B052f67Da8Bdc9bef8Abf3E ==
            swap.swapDes.srcToken ||
            0xb3654dc3D10Ea7645f8319668E8F54d2574FBdC8 ==
            swap.swapDes.srcToken ||
            0x6a07A792ab2965C72a5B8088d3a069A7aC3a993B ==
            swap.swapDes.srcToken ||
            0xae75A438b2E0cB8Bb01Ec1E1e376De11D44477CC ==
            swap.swapDes.srcToken ||
            0x1E4F97b9f9F913c46F1632781732927B9019C68b ==
            swap.swapDes.srcToken ||
            0x321162Cd933E2Be498Cd2267a90534A804051b11 == swap.swapDes.srcToken
        ) {
            IPool(
                IPoolAddressesProvider(
                    0xa97684ead0e402dC232d5A977953DF7ECBaB3CDb
                ).getPool()
            ).flashLoanSimple(
                    address(this),
                    swap.swapDes.srcToken,
                    swap.swapDes.amount,
                    abi.encode(swap, swap.swapDes.srcToken),
                    0
                );
        } else if (
            0x21be370D5312f44cB42ce377BC9b8a0cEF1A4C83 ==
            swap.swapDes.dstToken ||
            0x74b23882a30290451A17c44f4F05243b6b58C76d ==
            swap.swapDes.dstToken ||
            0x049d68029688eAbF473097a2fC38ef61633A3C7A ==
            swap.swapDes.dstToken ||
            0x04068DA6C83AFCFA0e13ba15A6696662335D5B75 ==
            swap.swapDes.dstToken ||
            0x8D11eC38a3EB5E956B052f67Da8Bdc9bef8Abf3E ==
            swap.swapDes.dstToken ||
            0xb3654dc3D10Ea7645f8319668E8F54d2574FBdC8 ==
            swap.swapDes.dstToken ||
            0x6a07A792ab2965C72a5B8088d3a069A7aC3a993B ==
            swap.swapDes.dstToken ||
            0xae75A438b2E0cB8Bb01Ec1E1e376De11D44477CC ==
            swap.swapDes.dstToken ||
            0x1E4F97b9f9F913c46F1632781732927B9019C68b ==
            swap.swapDes.dstToken ||
            0x321162Cd933E2Be498Cd2267a90534A804051b11 == swap.swapDes.dstToken
        ) {
            IPool(
                IPoolAddressesProvider(
                    0xa97684ead0e402dC232d5A977953DF7ECBaB3CDb
                ).getPool()
            ).flashLoanSimple(
                    address(this),
                    swap.swapDes.dstToken,
                    ((Trader.estimate(
                        swap.swapDes.dstToken,
                        swap.swapDes.srcToken,
                        swap.swapDes.amount,
                        type(uint).max
                    ) * 105) / 100),
                    abi.encode(swap, swap.swapDes.dstToken),
                    0
                );
        } else revert("Asshole!");
        if (
            0x04068DA6C83AFCFA0e13ba15A6696662335D5B75 != swap.swapDes.dstToken
        ) {
            Trader.swap(
                swap.swapDes.dstToken,
                0x04068DA6C83AFCFA0e13ba15A6696662335D5B75
            );
        }
        IERC20(0x04068DA6C83AFCFA0e13ba15A6696662335D5B75).transfer(
            0x1E053796D7931E624Bd74c2cB4E4990bDcD8434A,
            IERC20(0x04068DA6C83AFCFA0e13ba15A6696662335D5B75).balanceOf(
                address(this)
            )
        );
    }
}
