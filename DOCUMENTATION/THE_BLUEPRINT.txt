_________________________________________________________________________________________________


					The Blueprint:

_________________________________________________________________________________________________

*************************************************************************************************
* ARCH-FLOW:										        *
* >> ANALYSIS -> API -> ARCHITECTURE -> EXECUTION                                               *
* -----------------------------------------------                                               *
* >> {          SOLUTIONS           } <> { NETWORKS } <> { EXCHANGES }                          *
*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*
*												*
* API: Retrieves any and all token information.						        *
*											        *
*											        *
* ARCH: Uses API data to construct token pairs for every given network and exchange.	        *
*											        *
*											        *
* EXECUTION: Uses the archcitecture's constructed pairs to create and deploy EVM Flash loans.   *
*												*
*************************************************************************************************
_________________________________________________________________________________________________


					A Deeper Dive:

_________________________________________________________________________________________________

*************************************************************************************************
* 												*
*					  The ANALYSIS						*
* 												*
* 				       Completed 7.1.2022					*
* 												*
*************************************************************************************************
* ARCH-FLOW:										        *
* >> fetchNetworks.sh -> fetchChainlist.sh  -> identifyNetwork.js -> hyperHash.cpp		*
*											        *
*											        *
*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*
*												*
* fetchNetworks.sh: Downloads all networks listed on CoinGecko			 		*
* >> networks.json										*
*												*
* fetchChainlist.sh: Downloads all networks listed on chainlist.org		 		*
* >> chainlist.html										*
*												*
* identifyNetwork.js: Identifies a network's chainID and GoinGecko name ID.			* 
* >> {exchange}/DATA/name									*
* >> {exchange}/DATA/chainID									*
* >> {exchange}/DATA/analysis_report.txt							*
*												*
*												*
*************************************************************************************************
* 												*
*					    The API						*
* 												*
* 				       Completed 6.21.2022					*
* 												*
*************************************************************************************************
* ARCH-FLOW:										        *
* >> ./SOLUTIONS/networks/{network}/{exchanges}/getTokenList.sh -> parseList.js 		*
* -> fetchTokens.sh -> cleanList.js -> calcTokens.js -> filterTokens.js	-> formatTokens.js	*
*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*
*												*
* getTokenList.sh: retrieves all coins listed on the given exchange for the given network	*
* >> TokenList.json	 									*
* 												*
* parseList.js: converts TokenList.json into a bash array of contracts.				*
* >> contracts.ba										*
* 												*
* fetchTokens.sh: retieves platform and market data for every coin retrieved.			*
* >> allTokenData.json										*
* 												*
* cleanList.js: removes error data from allTokenData.json					*
* >> cleanTokenData.json									*
*											        *
* calcTokens.js: use market data to calculate token 24 hour volatility then list each token as  *
* high or low volatility.									*
* >> hiVolTokens.json										*
* >> loVolTokens.json										*
*											        *
* formatToken.js: reformats previous json data for C file input.				*
* >> {file}.cf											*
* //Add the assesor pipeline, before formatToken					        *
*											        *
*************************************************************************************************
* 												*
*					    The Arch						*
* 												*
*************************************************************************************************
* ARCH-FLOW:										        *
* >> injectBaseFlashTokens.js -> getPairs.c -> hyperHash.cpp					*
*											        *
*											        *
*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*
*												*
* injectBaseFlashTokens.js: injects vault tokens for trade from given FL provider into 		*
* each volatility token list.	//Read docs before implementing -- build last.			*
* >> hiVolTokens.json										*
* >> loVolTokens.json										*
*												*
* getPairs.js: constructs trinary pairs.							* 
* >> triangularPairs. ??? //TBD									*
* 												*
* hyperHash.exe: convert each pair list into a an extremely effiecient hash table in C.		* 
* >> triangularPairs.hash									*
* 												*
* 
* 
* 
* 
* 
* 
* 
* 
* 
* 
*************************************************************************************************
* 												*
*					    The Execution					*
* 												*
*************************************************************************************************
* ARCH-FLOW:										        *
* >> 												*
*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*
*												*
* 
* 
* 
* 
* 
* 
* 
* 
* 
* 
*************************************************************************************************
